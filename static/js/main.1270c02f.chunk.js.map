{"version":3,"sources":["stores/mbti/mbti.ts","stores/trend/trend.ts","common/loadable.tsx","page/Landing/index.ts","page/Main/index.ts","page/MBTI/index.ts","page/Trend/index.ts","router/index.tsx","reportWebVitals.ts","stores/rootReducer.ts","stores/store.ts","index.tsx"],"names":["reducer","createSlice","name","initialState","scores","reducers","updateMBTIAnswer","state","action","payload","questionIdx","answer","initMBTIAnswer","map","value","index","actions","answers","updateTrendAnswer","initTrendAnswer","loadable","loader","Loadable","loading","LandingPage","MainPage","MBTIPage","MBTIResultPage","TrendPage","TrendResultPage","GlobalCSS","css","Router","styles","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","MBTIReducer","TrendReducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uJAAA,gFAmBMA,EAAUC,YAAY,CAC1BC,KAAM,OACNC,aAN0B,CAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,IAMlBC,SAAU,CACRC,iBAAkB,SAACC,EAAOC,GACxB,OAAQA,EAAOC,QAAQC,aACrB,KAAK,EACL,KAAK,EACL,KAAK,EACHH,EAAMH,OAAO,IAAMI,EAAOC,QAAQE,OAClC,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACHJ,EAAMH,OAAO,IAAMI,EAAOC,QAAQE,OAClC,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHJ,EAAMH,OAAO,IAAMI,EAAOC,QAAQE,OAClC,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACHJ,EAAMH,OAAO,IAAMI,EAAOC,QAAQE,SAIxCC,eAAgB,SAACL,EAAOC,GACtBD,EAAMH,OAAOS,KAAI,SAACC,EAAOC,GACvBR,EAAMH,OAAOW,GAAS,S,EAKsBf,EAAQgB,QAA7CV,E,EAAAA,iBAAkBM,E,EAAAA,eAClBZ,MAAf,S,gCCvDA,gFAeMA,EAAUC,YAAY,CAC1BC,KAAM,QACNC,aAN2B,CAC3Bc,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAM3CZ,SAAU,CACRa,kBAAmB,SAACX,EAAOC,GACzBD,EAAMU,QAAQT,EAAOC,QAAQC,aAAeF,EAAOC,QAAQE,QAE7DQ,gBAAiB,SAACZ,EAAOC,GACvBD,EAAMU,QAAQJ,KAAI,SAACC,EAAOC,GACxBR,EAAMU,QAAQF,GAAS,S,EAMuBf,EAAQgB,QAA/CE,E,EAAAA,kBAAmBC,E,EAAAA,gBACnBnB,MAAf,S,0JC7BaoB,EAAW,SAACC,GAAD,OACtBC,IAAS,CACPD,SACAE,QAAS,kBAAM,iCCHNC,EAAcJ,GAAS,kBAAM,gCCA7BK,EAAWL,GAAS,kBAAM,gCCA1BM,EAAWN,GAAS,kBAAM,gCAC1BO,EAAiBP,GAAS,kBAAM,sDCDhCQ,EAAYR,GAAS,kBAAM,gCAC3BS,EAAkBT,GAAS,kBAAM,sDCYxCU,G,MAAYC,YAAH,wIAyBAC,EAhBA,WACb,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQC,OAAQH,IAChB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,QAAQC,UAAWX,IACrC,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,aAAaC,UAAWV,IAC1C,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,eAAeC,UAAWT,IAC5C,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,cAAcC,UAAWR,IAC3C,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,gBAAgBC,UAAWP,WCpBtCQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uCCFCtC,EAHC8C,YAAgB,CAAEC,gBAAaC,mBCIhCC,EALDC,YAAe,CAC3BlD,YCGFmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.1270c02f.chunk.js","sourcesContent":["import {\n  bindActionCreators,\n  createSlice,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\n\nexport interface IMBTI {\n  questionIdx: number;\n  answer: number; //+1 혹은 -1\n}\n\nexport type TMBTI = {\n  scores: Array<number>;\n};\n\nconst initialState: TMBTI = {\n  scores: [0, 0, 0, 0],\n};\n\nconst reducer = createSlice({\n  name: \"mbti\",\n  initialState,\n  reducers: {\n    updateMBTIAnswer: (state, action: PayloadAction<IMBTI>) => {\n      switch (action.payload.questionIdx) {\n        case 0:\n        case 3:\n        case 9:\n          state.scores[0] += action.payload.answer;\n          break;\n        case 5:\n        case 7:\n        case 10:\n          state.scores[1] += action.payload.answer;\n          break;\n        case 1:\n        case 2:\n        case 8:\n          state.scores[2] += action.payload.answer;\n          break;\n        case 4:\n        case 6:\n        case 11:\n          state.scores[3] += action.payload.answer;\n          break;\n      }\n    },\n    initMBTIAnswer: (state, action) => {\n      state.scores.map((value, index) => {\n        state.scores[index] = 0;\n      });\n    },\n  },\n});\nexport const { updateMBTIAnswer, initMBTIAnswer } = reducer.actions;\nexport default reducer.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface ITREND {\n  questionIdx: number;\n  answer: number; //+1 혹은 -1\n}\n\nexport type TTrend = {\n  answers: Array<number>;\n};\n\nconst initialState: TTrend = {\n  answers: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n};\n\nconst reducer = createSlice({\n  name: \"trend\",\n  initialState,\n  reducers: {\n    updateTrendAnswer: (state, action: PayloadAction<ITREND>) => {\n      state.answers[action.payload.questionIdx] = action.payload.answer;\n    },\n    initTrendAnswer: (state, action) => {\n      state.answers.map((value, index) => {\n        state.answers[index] = 0;\n      });\n    },\n  },\n});\n\nexport const { updateTrendAnswer, initTrendAnswer } = reducer.actions;\nexport default reducer.reducer;\n","import Loadable from \"react-loadable\";\n\nexport const loadable = (loader: any) =>\n  Loadable({\n    loader,\n    loading: () => <></>,\n  });\n","import { loadable } from \"../../common/loadable\";\n\nexport const LandingPage = loadable(() => import(\"./Landing\"));\n","import { loadable } from \"../../common/loadable\";\n\nexport const MainPage = loadable(() => import(\"./Main\"));\n","import { loadable } from \"../../common/loadable\";\n\nexport const MBTIPage = loadable(() => import(\"./MBTI\"));\nexport const MBTIResultPage = loadable(() => import(\"./Result/Result\"));\n","import { loadable } from \"../../common/loadable\";\n\nexport const TrendPage = loadable(() => import(\"./Trend\"));\nexport const TrendResultPage = loadable(() => import(\"./Result/Result\"));\n","import { Global, css } from \"@emotion/react\";\nimport React from \"react\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  RouteProps,\n  useLocation,\n} from \"react-router-dom\";\nimport { LandingPage } from \"../page/Landing\";\nimport { MainPage } from \"../page/Main\";\nimport { MBTIPage, MBTIResultPage } from \"../page/MBTI\";\nimport { TrendPage, TrendResultPage } from \"../page/Trend\";\nimport \"../style/font/font.css\";\n\nconst GlobalCSS = css`\n  body {\n    width: 100%;\n    height: fit-content;\n    margin: auto;\n    background-color: #fff;\n  }\n`;\n\nconst Router = (): React.ReactElement => {\n  return (\n    <BrowserRouter>\n      <Global styles={GlobalCSS} />\n      <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route exact path=\"/main\" component={MainPage} />\n        <Route exact path=\"/mbti/:idx\" component={MBTIPage} />\n        <Route exact path=\"/result/mbti\" component={MBTIResultPage} />\n        <Route exact path=\"/trend/:idx\" component={TrendPage} />\n        <Route exact path=\"/result/trend\" component={TrendResultPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport MBTIReducer from \"./mbti/mbti\";\nimport TrendReducer from \"./trend/trend\";\n\nconst reducer = combineReducers({ MBTIReducer, TrendReducer });\n\nexport type ReducerType = ReturnType<typeof reducer>;\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from \"./rootReducer\";\n\nconst store = configureStore({\n  reducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Router from \"./router\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./stores/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}